# Application units (Parameters by Liu et al. 2021)
# Unit energy density = 1 MPa
# Unit length = 1 micron
# Unit time = 1 second 

# =================================================================================
# Set the number of dimensions (2 or 3 for a 2D or 3D calculation)
# =================================================================================
set Number of dimensions = 3

# =================================================================================
# Set the length of the domain in all three dimensions
# (Domain size Z ignored in 2D)
# =================================================================================
# Each axes spans from zero to the specified length
set Domain size X = 1.0
set Domain size Y = 1.0
set Domain size Z = 1.0

# =================================================================================
# Set the element parameters
# =================================================================================
# The number of elements in each direction is 2^(refineFactor) * subdivisions
# Subdivisions Z ignored in 2D
# For optimal performance, use refineFactor primarily to determine the element size
set Subdivisions X = 16
set Subdivisions Y = 16
set Subdivisions Z = 16

set Refine factor = 0

# Set the polynomial degree of the element (allowed values: 1, 2, or 3)
set Element degree = 1

# =================================================================================
# Set the time step parameters
# =================================================================================
# The size of the time step
set Time step = 0.00025

# The simulation ends when either the number of time steps is reached or the
# simulation time is reached.
set Number of time steps = 160

# The number of phase field steps per CPFE step
set Number of phase field steps per CPFE step = 10

# =================================================================================
# Set the output parameters
# =================================================================================
# Type of spacing between outputs ("EQUAL_SPACING", "LOG_SPACING", "N_PER_DECADE",
# or "LIST")
set Output condition = EQUAL_SPACING

# Number of times the program outputs the fields (total number for "EQUAL_SPACING"
# and "LOG_SPACING", number per decade for "N_PER_DECADE", ignored for "LIST")
set Number of outputs = 160

# Whether to print timing information every time the code outputs
set Print timing information with output = true

# The number of time steps between updates being printed to the screen
set Skip print steps = 1

set Output directory = results_pf

set Number of checkpoints = 0

# =================================================================================
# Set the boundary conditions
# =================================================================================
# Set the boundary condition for each variable, where each variable is given by
# its name, as defined in equations.cc. The four boundary condition
# types are NATURAL, DIRICHLET, NON_UNIFORM_DIRICHLET and PERIODIC. If all
# of the boundaries have the same boundary condition, only one boundary condition
# type needs to be given. If multiple boundary condition types are needed, give a
# comma-separated list of the types. The order is the miniumum of x, maximum of x,
# minimum of y, maximum of y, minimum of z, maximum of z (i.e left, right, bottom,
# top in 2D and left, right, bottom, top, front, back in 3D). The value of a
# Dirichlet BC is specfied in the following way -- DIRCHILET: val -- where 'val' is
# the desired value. If the boundary condition is NON_UNIFORM_DIRICHLET, the
# boundary condition should be specified in the appropriate function in 'ICs_and_BCs.h'.
# Example 1: All periodic BCs for variable 'c'
# set Boundary condition for variable c = PERIODIC
# Example 2: Zero-derivative BCs on the left and right, Dirichlet BCs with value
# 1.5 on the top and bottom for variable 'n' in 2D
# set Boundary condition for variable n = NATURAL, NATURAL, DIRICHLET: 1.5, DIRICHLET: 1.5

set Boundary condition for variable n = NATURAL
set Boundary condition for variable dndt = NATURAL
set Boundary condition for variable strain_df = NATURAL

# =================================================================================
# Set the model constants
# =================================================================================
# Set the user-defined model constants, which must have a counter-part given in
# customPDE.h. These are most often used in the residual equations in equations.cc,
# but may also be used for initial conditions and nucleation calculations. The type
# options currently are DOUBLE, INT, BOOL, TENSOR, and [symmetry] ELASTIC CONSTANTS
# where [symmetry] is ISOTROPIC, TRANSVERSE, ORTHOTROPIC, or ANISOTROPIC.

# The mobility, L in equations.cpp
# ISOTROPIC
# set Model constant L = 4.8, DOUBLE
# ANISOTROPIC
set Model constant Lij_tp = ((4.8,0,0),(0,0.6,0),(0,0,4.8)), TENSOR

# The gradient energy coefficients
# In the twin plane reference plane
# ANISOTROPIC
set Model constant Kij_tp = ((0.0258,0,0),(0,0.00645,0),(0,0,0.0258)), TENSOR

# Twin direction unit vector
set Model constant td = (-0.631832692824310,	0.364788775284921,	0.683898090145388), TENSOR
# set Model constant td = (1.0,	0.0, 0.0), TENSOR

# Twin normal unit vector
set Model constant tn = (0.592273119665566,	-0.341949045072694,	0.729577550569842), TENSOR
# set Model constant tn = (0.0,	0.0 ,	1.0), TENSOR

# Euler angles for grain orientation (ZXZ convention)
set Model constant euler_angs = (0.0, 90.0, 30.0), TENSOR
# set Model constant euler_angs = (0.0, 45.0, 90.0), TENSOR

# Twin energy barrier (double well height) 
# 31.04 * (n^2) * (1-n)^2 has the same height as 4 * 1.94 n * (1-n) at n=1/2
set Model constant delf_tw = 31.04, DOUBLE

# Unit lenght (in m)
set Model constant l0 = 1.0e-6, DOUBLE

# Radius of initial semimajor axis of the ellipsoid
set Model constant a0 = 0.15, DOUBLE

# eccentricity of the elliptical seed
set Model constant ecc = 0.95, DOUBLE

# Regularization value
set Model constant regval = 1.0e-8, DOUBLE
